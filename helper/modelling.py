import osfrom local_rag_llm import local_llmimport streamlit as stfrom helper.own_corpus import check_db_exists, transfer_dbdef set_static_model_params():    st.session_state["paragraph_separator"] = "\n\n\n"    st.session_state["separator"] = " "    st.session_state["use_chat_engine"] = True    st.session_state["reset_chat_engine"] = False        def determine_rerun_reinitialize():    "determine values of 'rerun_populate_db', 'clear_database', 'reinitialized_db'"    if "rerun_populate_db" not in st.session_state:        st.session_state["rerun_populate_db"] = False    if "clear_database" not in st.session_state:        st.session_state["clear_database"] = False            # reinitialize the vector db for simultaneous access initially    if "reinitialized_db" not in st.session_state:        st.session_state["reinitialized_db"] = False    else:        st.session_state["reinitialized_db"] = True            if not(st.session_state["reinitialized_db"]):        # only run if database exists        if check_db_exists(user=st.session_state["db_info"].loc[0, 'user'], password=st.session_state["db_info"].loc[0, 'password'], db_name=st.session_state["master_db_name"]):            transfer_db(user=st.session_state["db_info"].loc[0, 'user'], password=st.session_state["db_info"].loc[0, 'password'], source_db=st.session_state["master_db_name"], target_db=st.session_state["db_name"])    def initialize(    which_llm_local,    which_corpus_local=None,    n_gpu_layers=100,    temperature=0.0,    max_new_tokens=512,    context_window=3900,    chunk_overlap=200,    chunk_size=512,    paragraph_separator="\n\n\n",    separator=" ",    memory_limit=2048,    system_prompt="",    rerun_populate_db=False,    clear_database_local=False,    corpora_dict=None,    llm_dict=None,    db_name="vector_db",    db_info=None,):    "initialize a new LLM"    text_path = (        corpora_dict.loc[lambda x: x.name == which_corpus_local, "text_path"].values[0]        if which_corpus_local is not None        else None    )        # remove any non-text files in text path on Mac    if text_path is not None:        files = os.listdir(text_path)        for item in files:            if not(item.endswith(".txt") or item.endswith(".csv")):                os.remove(os.path.join(text_path, item))        metadata_path = (        corpora_dict.loc[            lambda x: x.name == which_corpus_local, "metadata_path"        ].values[0]        if which_corpus_local is not None        else None    )    model = local_llm.local_llm(        llm_url=llm_dict.loc[lambda x: x.name == which_llm_local, "llm_url"].values[0],        llm_path=llm_dict.loc[lambda x: x.name == which_llm_local, "llm_path"].values[            0        ],        redownload_llm=False,        text_path=text_path,        metadata_path=metadata_path,        hf_token=os.getenv("HF_TOKEN"),        n_gpu_layers=n_gpu_layers,        temperature=temperature,        max_new_tokens=max_new_tokens,        context_window=context_window,        memory_limit=memory_limit,        system_prompt=system_prompt,    )    if which_corpus_local is not None:        if rerun_populate_db:            clear_table = True        else:            clear_table = False                model.setup_db(            db_name=db_name,            user=db_info.loc[0, "user"],            password=db_info.loc[0, "password"],            table_name=which_corpus_local,            clear_database=clear_database_local,            clear_table=clear_table,        )                # check if table exists        with model.db_connection.cursor() as c:            c.execute(f"SELECT EXISTS(SELECT * FROM information_schema.tables WHERE table_name='data_{which_corpus_local}')")            table_exists = c.fetchone()[0]        if rerun_populate_db or not(table_exists):            model.populate_db(                chunk_overlap=chunk_overlap,                chunk_size=chunk_size,                paragraph_separator=paragraph_separator,                separator=separator,                quiet=False,            )    return model, which_llm_local, which_corpus_local